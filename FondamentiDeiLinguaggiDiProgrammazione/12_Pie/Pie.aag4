
grammar Pie;

@lexer::header {package pieGrammar;}
@parser::header{package pieGrammar;
	
}
// START: members
@parser::members {
//	private PieTranslator translator;
//	public PieParser(TokenStream input, PieTranslator translator){
//		super(input);
//		this.translator=translator;
//	}

}


program
	:	( functionDefinition | statement )+ EOF 
	;
functionDefinition
	:	'def' ID '(' (vardef (',' vardef)* )? ')' block 
	;

block
	:	':' NL statement+ '.' NL	
	|	statement
	;
	
statement
	:	structDefinition                 # StatStructDefinition
	|	field '=' expr NL	               # StatAssigment
	|	'return' expr NL                 # StatReturn  
	|	'print' expr NL	                 # StatPrint 
	|	'if' expr block ('else' block)?  # StatIf
	|	'while' expr block               # StaWhile
	|	functionCall NL                  # StatFunctionCall 
	|	NL	                               # StatNL
	;
	
structDefinition
    :   'struct' ID '{' vardef (',' vardef)* '}' NL
    ;
    


vardef
  : ID 
  ;




functionCall
	:	ID '(' (expr (',' expr )*)? ')'
	;

// few operators to keep grammar simple ... add *, /, !=, >, >=...
expr:   functionCall             # ExprFunctionCall
    |   'new' ID                 # ExprStructCreation
    |   field                    # ExprField
    |   expr op=('*' | '/') expr # ExprMult
    |   expr op=('+' | '-') expr # ExprAdd   
    |   INT                      # ExprInt
    |   STRING                   # ExprString 
    |   '(' expr ')'             # ExprParens
    |   expr op=('=='|'<') expr  # ExprCondition 
    ;


field: ID ('.' ID)* ;  // CAN'T RESOLVE TIL RUNTIME!



// LEXICAL RULES

NL	:	'\r'? '\n' ;

ID  :   LETTER (LETTER | '0'..'9')*  
    ;
fragment
LETTER:  ('a'..'z' | 'A'..'Z')
    ;

CHAR:	'\'' . '\'' 
    ;

STRING:	'\"' (.)*? '\"' 
   ;

INT :   '0'..'9'+ 
   ;

FLOAT:	INT '.' INT*
	|	'.' INT+
	;

WS  :   (' '|'\t') -> skip
    ;

SL_COMMENT
    :   '#' ~('\r'|'\n')* -> skip
    ;